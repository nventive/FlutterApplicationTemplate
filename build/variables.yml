variables:
  # Prerequisites - Variable groups
  # Make sure you have the following variable groups in your Azure pipeline library:
  #
  # FlutterApplicationTemplate.Distribution.Internal.Android
  #   ApplicationIdentifier: This is the internal application id of the app for Android releases.
  #   AndroidSigningKeyAlias: This is the keystore alias.
  #   AndroidSigningKeyPass: This is the keystore keypass (secured).
  #   AndroidSigningStorePass: This is the keystore storepass (secured).
  #
  # FlutterApplicationTemplate.Distribution.GooglePlay
  #   ApplicationIdentifier: This is the official application id of the app that should go on the store.
  #   AndroidSigningKeyAlias: This is the keystore alias.
  #   AndroidSigningKeyPass: This is the keystore keypass (secured).
  #   AndroidSigningStorePass: This is the keystore storepass (secured).
  #
  # FlutterApplicationTemplate.Distribution.Internal.iOS
  #   ApplicationIdentifier: This is the internal application id of the app for iOS releases.
  #   AppleCertificatePassword: The certificate password (secured).
  #
  # FlutterApplicationTemplate.Distribution.AppStore
  #   ApplicationIdentifier: The official bundle id of the app that should go on the store; the app will be resigned with this id.
  #   AppleCertificatePassword: The certificate password (secured).
  #   AppleTeamId: The developer account team id (secured).
  #   AppleTeamName: The developer account team name.

  # Prerequisites - Secured files.
  # Make sure you have the following secured files in your Azure pipeline library.
  #
  # Android.
  InternalKeystore: com.nventive.internal.flutterapptemplate.jks # This is the internal keystore used for internal builds.
  InternalKeyProperties: com.nventive.internal.flutterapptemplate.key.properties # This is the internal key properties used for internal builds.
  GooglePlayKeystore: com.nventive.flutterapptemplate.jks # This is the official keystore used for Google Play.
  GooglePlayKeyProperties: com.nventive.flutterapptemplate.key.properties # This is the official key properties used for Google Play.
  aabFileExtension: aab # This is the file extension for Android App Bundles.

  # iOS.
  InternalProvisioningProfile: com.nventive.internal.flutterapptemplate.mobileprovision # This is the internal provisioning profile for internal builds.
  InternalExportOptions: com.nventive.internal.flutterapptemplate.exportOptions.plist # This is the export options file for internal builds.
  InternalCertificate: nventive.p12 # This is the certificate from the nventive Apple account used to sign internal builds.
  AppStoreProvisioningProfile: com.nventive.flutterapptemplate.mobileprovision # This is the client provisioning profile for the AppStore (Production distribution).
  AppStoreExportOptions: com.nventive.flutterapptemplate.exportOptions.plist # This is the export options file for the AppStore (Production distribution) builds.
  AppStoreCertificate: nventive.p12 # This is the client production certificate used to sign AppStore builds.
  ipaFileExtension: ipa # This is the file extension for iOS IPA files.
  
  # Firebase
  InternalFirebaseJson: firebase-flutter-internal.json
  InternalFirebaseOptionsDart: firebase_options-flutter-internal.dart
  InternalGoogleServicesJson: google-services-flutter-internal.json
  FirebaseJson: firebase-flutter.json
  FirebaseOptionsDart: firebase_options-flutter.dart
  GoogleServicesJson: google-services-flutter.json

  # Prerequisites - Service connections.
  # Make sure you have the following service connections in your Azure pipeline library.
  GooglePlayServiceConnection: GooglePlay-nventive-ApplicationTemplate
  AppStoreServiceConnection: AppStore-nventive
  FirebaseAppDistributionServiceConnection: com.nventive.flutterapplicationtemplate.firebaseappdistribution.json

  # Solution to build.
  ProjectName: FlutterApplicationTemplate

  # Flutter version.
  FlutterVersion: '3.27.3'

  # Docker container to run MobSF.
  DockerVersion: '25.0.5'

  # MobSF Auth key.
  # Corrresponds to the key used for authenticating requests to the MobSF API. In this pipeline setup, MobSF runs in a docker container and by 
  # default the API key is randomly generated by MobSF itself when running it in a dedicated server, but because we're automating the process
  # we need to manually set it beforehand so we can authenticate further requests. Can be set to any string. More info:
  # - https://mobsf.github.io/docs/#/extras?id=extra-features
  # - https://mobsf.live/api_docs
  mobSfApiKey: '8181'

  # Virtual machine images.
  windowsHostedAgentImage: 'windows-2022'
  macOSHostedAgentImage: 'macOS-13'
  ubuntuHostedAgentImage: 'ubuntu-22.04'

  # Name of the folder where the artefacts will be placed. Variable used in build and release phases.
  # We make seperate folders so that releases can each download only the folder they need.
  AndroidArtifactName: Android
  iOSArtifactName: iOS
  WindowsArtifactName: Windows
  TestsArtifactName: Tests
  ReleaseNotesArtifactName: ReleaseNotes

  # To know if it's a Pull Request build.
  IsPullRequestBuild: $[eq(variables['Build.Reason'], 'PullRequest')]

  # Pipeline configuration (Disable shallow fetch).
  # See https://dev.to/kkazala/azure-devops-pipelines-shallow-fetch-1-is-now-default-4656 for more details.
  # See https://learn.microsoft.com/en-us/azure/devops/pipelines/repos/pipeline-options-for-git?view=azure-devops&tabs=yaml#shallow-fetch for more details.
  Agent.Source.Git.ShallowFetchDepth: 0
